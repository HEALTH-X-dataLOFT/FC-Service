---
# Source: fc-service/charts/keycloak/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fc-keycloak
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-15.0.5
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
type: Opaque
data:
  admin-password: "YWRtaW4="
---
# Source: fc-service/charts/neo4j/templates/neo4j-auth.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "fc-neo4j-db-auth"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
type: Opaque
data:
  NEO4J_AUTH: "bmVvNGovbmVvMTIzNDU="
---
# Source: fc-service/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fc-postgres
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: fc-postgres
    helm.sh/chart: postgresql-12.4.3
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  postgres-password: "cG9zdGdyZXM="
  password: "a2V5Y2xvYWs="
  # We don't auto-generate LDAP password when it's not provided as we do for other passwords
---
# Source: fc-service/templates/keycloak-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: fc-keycloak-client-secret
type: Opaque
stringData:
  keycloak_client_secret: "**********"
---
# Source: fc-service/charts/keycloak/templates/configmap-env-vars.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fc-keycloak-env-vars
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-15.0.5
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
data:
  KEYCLOAK_ADMIN: "admin"
  KEYCLOAK_HTTP_PORT: "8080"
  KEYCLOAK_PROXY: "edge"
  KEYCLOAK_ENABLE_STATISTICS: "false"
  KEYCLOAK_DATABASE_HOST: "fc-postgres"
  KEYCLOAK_DATABASE_PORT: "5432"
  KEYCLOAK_DATABASE_NAME: "keycloak"
  KEYCLOAK_DATABASE_USER: "keycloak"
  KEYCLOAK_PRODUCTION:  "false"
  KEYCLOAK_ENABLE_HTTPS: "false"
  KEYCLOAK_CACHE_TYPE: "ispn"
  KEYCLOAK_CACHE_STACK: "kubernetes"
  JAVA_OPTS_APPEND: "-Djgroups.dns.query=fc-keycloak-headless.fed-cat.svc.cluster.local"
  KEYCLOAK_LOG_OUTPUT: "default"
  KC_LOG_LEVEL: "DEBUG,io.quarkus:INFO,freemarker.cache:INFO,liquibase:INFO,org.hibernate:INFO,org.infinispan:INFO,org.keycloak.services.scheduled:INFO,org.keycloak.transaction:INFO,io.netty.buffer.PoolThreadCache:INFO,org.keycloak.models.sessions.infinispan:INFO"
---
# Source: fc-service/charts/neo4j/templates/neo4j-config.yaml
# Neo4j config values that are required for neo4j to work correctly in Kubernetes, these are not overridden by user-provided values
apiVersion: v1
kind: ConfigMap
metadata:
  name: "fc-neo4j-k8s-config"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
data:
  server.default_listen_address: "0.0.0.0"
---
# Source: fc-service/charts/neo4j/templates/neo4j-config.yaml
# User-provided Neo4j config values
apiVersion: v1
kind: ConfigMap
metadata:
  name: "fc-neo4j-user-config"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
data:
  dbms.security.procedures.allowlist: gds.*,apoc.*,n10s.*,semantics.*
  dbms.security.procedures.unrestricted: gds.*,apoc.*,n10s.*,semantics.*
  server.config.strict_validation.enabled: "false"
  server.jvm.additional: |-  
    -XX:+UseG1GC
    -XX:-OmitStackTraceInFastThrow
    -XX:+AlwaysPreTouch
    -XX:+UnlockExperimentalVMOptions
    -XX:+TrustFinalNonStaticFields
    -XX:+DisableExplicitGC
    -Djdk.nio.maxCachedBufferSize=1024
    -Dio.netty.tryReflectionSetAccessible=true
    -Djdk.tls.ephemeralDHKeySize=2048
    -Djdk.tls.rejectClientInitiatedRenegotiation=true
    -XX:FlightRecorderOptions=stackdepth=256
    -XX:+UnlockDiagnosticVMOptions
    -XX:+DebugNonSafepoints
    --add-opens=java.base/java.nio=ALL-UNNAMED
    --add-opens=java.base/java.io=ALL-UNNAMED
    --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
    -Dlog4j2.disable.jmx=true
---
# Source: fc-service/charts/neo4j/templates/neo4j-config.yaml
# Default Neo4j config values, these are overridden by user-provided values in fc-neo4j-user-config
apiVersion: v1
kind: ConfigMap
metadata:
  name: "fc-neo4j-default-config"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
data:

  # Neo4j defaults
  server.directories.import: import
  server.bolt.enabled: 'true'
  server.http.enabled: 'true'
  server.https.enabled: 'false'
  db.tx_log.rotation.retention_policy: 1 days
  server.jvm.additional: -XX:+UseG1GC
  server.jvm.additional: -XX:-OmitStackTraceInFastThrow
  server.jvm.additional: -XX:+AlwaysPreTouch
  server.jvm.additional: -XX:+UnlockExperimentalVMOptions
  server.jvm.additional: -XX:+TrustFinalNonStaticFields
  server.jvm.additional: -XX:+DisableExplicitGC
  server.jvm.additional: -Djdk.nio.maxCachedBufferSize=1024
  server.jvm.additional: -Dio.netty.tryReflectionSetAccessible=true
  server.jvm.additional: -Djdk.tls.ephemeralDHKeySize=2048
  server.jvm.additional: -Djdk.tls.rejectClientInitiatedRenegotiation=true
  server.jvm.additional: -XX:FlightRecorderOptions=stackdepth=256
  server.jvm.additional: -XX:+UnlockDiagnosticVMOptions
  server.jvm.additional: -XX:+DebugNonSafepoints
  server.jvm.additional: --add-opens=java.base/java.nio=ALL-UNNAMED
  server.jvm.additional: --add-opens=java.base/java.io=ALL-UNNAMED
  server.jvm.additional: --add-opens=java.base/sun.nio.ch=ALL-UNNAMED
  server.jvm.additional: -Dlog4j2.disable.jmx=true
  server.windows_service_name: neo4j
  server.panic.shutdown_on_panic: 'true'
  
  server.logs.config: /config/server-logs.xml/server-logs.xml
  server.logs.user.config: /config/user-logs.xml/user-logs.xml

  # Helm defaults

  # Bolt keep alive
  # this helps to ensure that LoadBalancers do not close bolt connections that are in use but appear idle
  server.bolt.connection_keep_alive: "30s"
  server.bolt.connection_keep_alive_for_requests: "ALL"
  server.bolt.connection_keep_alive_streaming_scheduling_interval: "30s"

  # If we set default advertised address it over-rides the bolt address used to populate the browser in a really annoying way
  # dbms.default_advertised_address: "$(bash -c 'echo ${SERVICE_DOMAIN}')"


  # Other
  internal.dbms.ssl.system.ignore_dot_files: "true"
  # Logging
  server.directories.logs: "/logs"
  # Import
  server.directories.import: "/import"

  # Use more reliable defaults SSL / TLS settings for K8s
  dbms.ssl.policy.bolt.client_auth: "NONE"
  dbms.ssl.policy.https.client_auth: "NONE"
---
# Source: fc-service/charts/neo4j/templates/neo4j-config.yaml
# server-logs.xml as configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: "fc-neo4j-server-logs-config"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
data:
  server-logs.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
    
        Copyright (c) "Neo4j"
        Neo4j Sweden AB [http://neo4j.com]
        This file is a commercial add-on to Neo4j Enterprise Edition.
    
    -->
    <!--
        This is a log4j 2 configuration file.
    
        It is highly recommended to keep the original "debug.log" as is, to make sure enough data is captured in case
        of errors in a format that neo4j developers can work with.
    
        All configuration values can be queried with the lookup prefix "config:". You can for example, resolve
        the path to your neo4j home directory with ${config:dbms.directories.neo4j_home}.
    
        Please consult https://logging.apache.org/log4j/2.x/manual/configuration.html for instructions and
        available configuration options.
    -->
    <Configuration status="ERROR" monitorInterval="30" packages="org.neo4j.logging.log4j">
        <Appenders>
            <!-- Default debug.log, please keep -->
            <RollingRandomAccessFile name="DebugLog" fileName="${config:server.directories.logs}/debug.log"
                                     filePattern="$${config:server.directories.logs}/debug.log.%02i">
                <Neo4jDebugLogLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSSZ}{GMT+0} %-5p [%c{1.}] %m%n"/>
                <Policies>
                    <SizeBasedTriggeringPolicy size="20 MB"/>
                </Policies>
                <DefaultRolloverStrategy fileIndex="min" max="7"/>
            </RollingRandomAccessFile>
    
            <RollingRandomAccessFile name="HttpLog" fileName="${config:server.directories.logs}/http.log"
                                     filePattern="$${config:server.directories.logs}/http.log.%02i">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSSZ}{GMT+0} %-5p %m%n"/>
                <Policies>
                    <SizeBasedTriggeringPolicy size="20 MB"/>
                </Policies>
                <DefaultRolloverStrategy fileIndex="min" max="5"/>
            </RollingRandomAccessFile>
    
            <RollingRandomAccessFile name="QueryLog" fileName="${config:server.directories.logs}/query.log"
                                     filePattern="$${config:server.directories.logs}/query.log.%02i">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSSZ}{GMT+0} %-5p %m%n"/>
                <Policies>
                    <SizeBasedTriggeringPolicy size="20 MB"/>
                </Policies>
                <DefaultRolloverStrategy fileIndex="min" max="7"/>
            </RollingRandomAccessFile>
    
            <RollingRandomAccessFile name="SecurityLog" fileName="${config:server.directories.logs}/security.log"
                                     filePattern="$${config:server.directories.logs}/security.log.%02i">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSSZ}{GMT+0} %-5p %m%n"/>
                <Policies>
                    <SizeBasedTriggeringPolicy size="20 MB"/>
                </Policies>
                <DefaultRolloverStrategy fileIndex="min" max="7"/>
            </RollingRandomAccessFile>
        </Appenders>
    
        <Loggers>
            <!-- Log levels. One of DEBUG, INFO, WARN, ERROR or OFF -->
    
            <!-- The debug log is used as the root logger to catch everything -->
            <Root level="INFO">
                <AppenderRef ref="DebugLog"/> <!-- Keep this -->
            </Root>
    
            <!-- The query log, must be named "QueryLogger" -->
            <Logger name="QueryLogger" level="INFO" additivity="false">
                <AppenderRef ref="QueryLog"/>
            </Logger>
    
            <!-- The http request log, must be named "HttpLogger" -->
            <Logger name="HttpLogger" level="INFO" additivity="false">
                <AppenderRef ref="HttpLog"/>
            </Logger>
    
            <!-- The security log, must be named "SecurityLogger" -->
            <Logger name="SecurityLogger" level="INFO" additivity="false">
                <AppenderRef ref="SecurityLog"/>
            </Logger>
        </Loggers>
    </Configuration>
---
# Source: fc-service/charts/neo4j/templates/neo4j-config.yaml
# user-logs.xml as configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: "fc-neo4j-user-logs-config"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
data:
  user-logs.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
    
        Copyright (c) "Neo4j"
        Neo4j Sweden AB [http://neo4j.com]
        This file is a commercial add-on to Neo4j Enterprise Edition.
    
    -->
    <!--
        This is a log4j 2 configuration file that provides maximum flexibility.
    
        All configuration values can be queried with the lookup prefix "config:". You can for example, resolve
        the path to your neo4j home directory with ${config:dbms.directories.neo4j_home}.
    
        Please consult https://logging.apache.org/log4j/2.x/manual/configuration.html for instructions and
        available configuration options.
    -->
    <Configuration status="ERROR" monitorInterval="30" packages="org.neo4j.logging.log4j">
    
        <Appenders>
            <RollingRandomAccessFile name="Neo4jLog" fileName="${config:server.directories.logs}/neo4j.log"
                                     filePattern="$${config:server.directories.logs}/neo4j.log.%02i">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSSZ}{GMT+0} %-5p %m%n"/>
                <Policies>
                    <SizeBasedTriggeringPolicy size="20 MB"/>
                </Policies>
                <DefaultRolloverStrategy fileIndex="min" max="7"/>
            </RollingRandomAccessFile>
    
            <!-- Only used by "neo4j console", will be ignored otherwise -->
            <Console name="ConsoleAppender" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSSZ}{GMT+0} %-5p %m%n"/>
            </Console>
        </Appenders>
    
        <Loggers>
            <!-- Log level for the neo4j log. One of DEBUG, INFO, WARN, ERROR or OFF -->
            <Root level="INFO">
                <AppenderRef ref="Neo4jLog"/>
                <AppenderRef ref="ConsoleAppender"/>
            </Root>
        </Loggers>
    
    </Configuration>
---
# Source: fc-service/charts/neo4j/templates/neo4j-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "fc-neo4j-env"
  namespace: "fed-cat"
  labels:
    app: "fc-neo4j-db"    
data:
  # It should not be necessary for neo4j users/administrators to modify this configMap
  # Neo4j configuration is set in the fc-neo4j-user-config ConfigMap
  NEO4J_EDITION: "COMMUNITY_K8S"
  NEO4J_CONF: "/config/"
  K8S_NEO4J_NAME: "fc-neo4j-db"
  EXTENDED_CONF: "yes"
  NEO4J_PLUGINS: '["apoc", "graph-data-science", "n10s"]'
---
# Source: fc-service/charts/postgresql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fc-postgres-init-scripts
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: fc-postgres
    helm.sh/chart: postgresql-12.4.3
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
data:
  00_init_keycloak.sql: |
    CREATE USER keycloak WITH PASSWORD 'keycloak';
    CREATE DATABASE "keycloak" WITH OWNER keycloak;
    GRANT ALL PRIVILEGES ON DATABASE keycloak TO $POSTGRES_USER;
---
# Source: fc-service/templates/keycloak-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: fc-keycloak-realm-configmap
data:
  gaia-x-realm.json: |-
    {
      "id": "gaia-x",
      "realm": "gaia-x",
      "displayName": "GAIA-X",
      "notBefore": 1660684842,
      "defaultSignatureAlgorithm": "RS256",
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 900,
      "accessTokenLifespanForImplicitFlow": 1500,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 2592000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "oauth2DeviceCodeLifespan": 600,
      "oauth2DevicePollingInterval": 5,
      "enabled": true,
      "sslRequired": "none",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "roles": {
        "realm": [
          {
            "id": "114aff6f-9cd0-43e4-b253-ecc8051b78be",
            "name": "uma_authorization",
            "description": "${role_uma_authorization}",
            "composite": false,
            "clientRole": false,
            "containerId": "gaia-x",
            "attributes": {}
          },
          {
            "id": "f43e5019-48a3-4f69-9867-2ab167a22c44",
            "name": "offline_access",
            "description": "${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "gaia-x",
            "attributes": {}
          },
          {
            "id": "8ee7d6f7-f168-4b62-ae34-1c18ffbf631a",
            "name": "default-roles-gaia-x",
            "description": "${role_default-roles}",
            "composite": false,
            "clientRole": false,
            "containerId": "gaia-x",
            "attributes": {}
          }
        ],
        "client": {
          "federated-catalogue": [
            {
              "id": "f657c29c-1939-4735-b10e-681a61f10df3",
              "name": "Ro-SD-A",
              "composite": false,
              "clientRole": true,
              "containerId": "52c9c697-c860-4edd-bde4-5e03904fdb44",
              "attributes": {}
            },
            {
              "id": "fb6bd4dd-0b5c-4774-8fa8-943bc6263e55",
              "name": "Ro-PA-A",
              "composite": false,
              "clientRole": true,
              "containerId": "52c9c697-c860-4edd-bde4-5e03904fdb44",
              "attributes": {}
            },
            {
              "id": "99dd313d-b5c1-4c87-ab50-c8a3f23d6a98",
              "name": "uma_protection",
              "composite": false,
              "clientRole": true,
              "containerId": "52c9c697-c860-4edd-bde4-5e03904fdb44",
              "attributes": {}
            },
            {
              "id": "2c40b6e8-7ab1-442e-a666-6df273a76f97",
              "name": "Ro-MU-CA",
              "composite": true,
              "composites": {
                "client": {
                  "federated-catalogue": [
                    "Ro-SD-A",
                    "Ro-PA-A",
                    "Ro-MU-A"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "52c9c697-c860-4edd-bde4-5e03904fdb44",
              "attributes": {}
            },
            {
              "id": "73cdff87-5679-403f-8a3c-d965bcb9d830",
              "name": "Ro-MU-A",
              "composite": false,
              "clientRole": true,
              "containerId": "52c9c697-c860-4edd-bde4-5e03904fdb44",
              "attributes": {}
            }
          ],
          "realm-management": [
            {
              "id": "5b9f2d0f-42a7-4840-b0d3-1a721ce966a2",
              "name": "create-client",
              "description": "${role_create-client}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "e7b13600-8203-4f4a-b9ae-bb1ef1b3ffd0",
              "name": "impersonation",
              "description": "${role_impersonation}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "b907922d-e3a9-4d2e-bc0a-98658e807412",
              "name": "manage-realm",
              "description": "${role_manage-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "78cab9dd-0779-4c56-aa81-4a2afda2bf29",
              "name": "manage-events",
              "description": "${role_manage-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "40904ff5-ed33-4c11-ad98-84eeb6e983f9",
              "name": "view-clients",
              "description": "${role_view-clients}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-clients"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "03ec9856-cc25-42f8-9c73-4a3bd2a7e361",
              "name": "view-authorization",
              "description": "${role_view-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "e78ea104-4b06-4958-ad5d-218b123c5a7d",
              "name": "query-users",
              "description": "${role_query-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "d8ec8ec3-1537-4612-8f23-c60fca6a2216",
              "name": "view-identity-providers",
              "description": "${role_view-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "956c9acd-018e-4c70-b4a0-7204333b3bb8",
              "name": "query-groups",
              "description": "${role_query-groups}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "b94967f5-7929-4d6f-ade7-ef2d7db43cd7",
              "name": "manage-users",
              "description": "${role_manage-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "8071f8be-e915-465c-ba7f-a84feda1769e",
              "name": "manage-authorization",
              "description": "${role_manage-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "6fd195b9-bd1e-4b17-b37b-3557b66ce2b7",
              "name": "view-realm",
              "description": "${role_view-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "68ca7431-d90d-482a-8901-4bc35cbe6179",
              "name": "manage-clients",
              "description": "${role_manage-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "1f5f2ec2-8d41-4d5d-8dd4-f5f17bf914e9",
              "name": "view-users",
              "description": "${role_view-users}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-users",
                    "query-groups"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "6ad820d9-8e67-4902-a91b-54a61d6204a9",
              "name": "query-clients",
              "description": "${role_query-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "7eaf080d-36ca-4c69-8f86-cb61b9bcbe5d",
              "name": "query-realms",
              "description": "${role_query-realms}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "453d293d-ce02-42c8-9703-ed8a99c33214",
              "name": "realm-admin",
              "description": "${role_realm-admin}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "create-client",
                    "impersonation",
                    "manage-realm",
                    "manage-events",
                    "view-clients",
                    "view-authorization",
                    "query-users",
                    "view-identity-providers",
                    "query-groups",
                    "manage-users",
                    "manage-authorization",
                    "view-realm",
                    "view-users",
                    "manage-clients",
                    "query-clients",
                    "query-realms",
                    "view-events",
                    "manage-identity-providers"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "2642b524-c1b7-4852-b37b-1a09678cb9bc",
              "name": "view-events",
              "description": "${role_view-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            },
            {
              "id": "74c6912a-b4d9-4897-9c66-c00f820791a2",
              "name": "manage-identity-providers",
              "description": "${role_manage-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
              "attributes": {}
            }
          ],
          "security-admin-console": [],
          "admin-cli": [],
          "account-console": [],
          "broker": [],
          "account": [
            {
              "id": "26a2da99-679c-40e4-a29e-84dc0e87ce47",
              "name": "manage-account",
              "composite": false,
              "clientRole": true,
              "containerId": "98919336-c907-4361-9872-6466ca1bae7e",
              "attributes": {}
            },
            {
              "id": "d4d32ec8-dff0-4a6c-8d77-2af81604a5d1",
              "name": "delete-account",
              "description": "${role_delete-account}",
              "composite": false,
              "clientRole": true,
              "containerId": "98919336-c907-4361-9872-6466ca1bae7e",
              "attributes": {}
            }
          ]
        }
      },
      "groups": [],
      "defaultRole": {
        "id": "8ee7d6f7-f168-4b62-ae34-1c18ffbf631a",
        "name": "default-roles-gaia-x",
        "description": "${role_default-roles}",
        "composite": false,
        "clientRole": false,
        "containerId": "gaia-x"
      },
      "requiredCredentials": [
        "password"
      ],
      "passwordPolicy": "length(8) and specialChars(1) and upperCase(1) and lowerCase(1) and digits(1)",
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "users": [
        {
          "id": "25b4615a-b7e1-4554-be7d-85f50b2151cf",
          "createdTimestamp": 1656986465494,
          "username": "service-account-federated-catalogue",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "serviceAccountClientId": "federated-catalogue",
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": [
            "default-roles-gaia-x"
          ],
          "clientRoles": {
            "federated-catalogue": [
              "uma_protection"
            ],
            "realm-management": [
              "manage-users",
              "view-users",
              "view-clients"
            ]
          },
          "notBefore": 0,
          "groups": []
        }
      ],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account"
            ]
          }
        ]
      },
      "clients": [
        {
          "id": "98919336-c907-4361-9872-6466ca1bae7e",
          "clientId": "account",
          "name": "${client_account}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/gaia-x/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/gaia-x/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "bd308877-0534-4ad0-a136-1e4a4bdaac6b",
          "clientId": "account-console",
          "name": "${client_account-console}",
          "rootUrl": "${authBaseUrl}",
          "baseUrl": "/realms/gaia-x/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/realms/gaia-x/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "1ff4a2da-164b-4b21-9e10-f0600207f2e7",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "d0eb7727-06f1-491c-9d9a-aecabefdd4a9",
          "clientId": "admin-cli",
          "name": "${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "096c1a58-a545-4089-8273-b320c016f076",
          "clientId": "broker",
          "name": "${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "52c9c697-c860-4edd-bde4-5e03904fdb44",
          "clientId": "federated-catalogue",
          "name": "",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "http://78.138.66.147:8088/*",
            "https://fc-demo-server.gxfs.dev/*",
            "http://fc-demo-server.gxfs.dev/*",
            "http://localhost:8088/*",
            "http://127.0.0.1:8088/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": true,
          "authorizationServicesEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "oauth2.device.authorization.grant.enabled": "true",
            "backchannel.logout.revoke.offline.tokens": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "use.refresh.tokens": "true",
            "oidc.ciba.grant.enabled": "false",
            "backchannel.logout.session.required": "false",
            "client_credentials.use_refresh_token": "false",
            "require.pushed.authorization.requests": "false",
            "saml.client.signature": "false",
            "id.token.as.detached.signature": "false",
            "saml.assertion.signature": "false",
            "saml.encrypt": "false",
            "saml.server.signature": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml.artifact.binding": "false",
            "saml_force_name_id_format": "false",
            "acr.loa.map": "{}",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "token.response.type.bearer.lower-case": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "ea17803d-3908-4f86-aa5c-9aaa1e75859b",
              "name": "Client Host",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientHost",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientHost",
                "jsonType.label": "String"
              }
            },
            {
              "id": "ba016eaa-3a4a-4a31-af36-0fa96d51cf0b",
              "name": "Client ID",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientId",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientId",
                "jsonType.label": "String"
              }
            },
            {
              "id": "657af1d2-f87a-41c0-8132-5d790db1a08c",
              "name": "Client IP Address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientAddress",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientAddress",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "gaia-x",
            "roles"
          ],
          "optionalClientScopes": [
            "schema",
            "address",
            "role",
            "phone",
            "query",
            "self-description",
            "profile",
            "offline_access",
            "microprofile-jwt",
            "user",
            "participant",
            "email"
          ],
          "authorizationSettings": {
            "allowRemoteResourceManagement": false,
            "policyEnforcementMode": "ENFORCING",
            "resources": [
              {
                "name": "Default Resource",
                "type": "urn:federated-catalogue:resources:default",
                "ownerManagedAccess": false,
                "attributes": {},
                "_id": "8eb1c352-f9bf-4e04-9f1e-177dcccc9932",
                "uris": [
                  "/*"
                ]
              }
            ],
            "policies": [
              {
                "id": "fa954145-96cc-4f08-85f9-12e96eb31f86",
                "name": "Default Permission",
                "description": "A permission that applies to the default resource type",
                "type": "resource",
                "logic": "POSITIVE",
                "decisionStrategy": "UNANIMOUS",
                "config": {
                  "defaultResourceType": "urn:federated-catalogue:resources:default",
                  "applyPolicies": "[]"
                }
              }
            ],
            "scopes": [],
            "decisionStrategy": "UNANIMOUS"
          }
        },
        {
          "id": "af3a57c9-da9c-47b6-81a0-f131b7637d08",
          "clientId": "realm-management",
          "name": "${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {},
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "12604a51-9ed5-4ec6-967d-373b185f15ec",
          "clientId": "security-admin-console",
          "name": "${client_security-admin-console}",
          "rootUrl": "${authAdminUrl}",
          "baseUrl": "/admin/gaia-x/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "redirectUris": [
            "/admin/gaia-x/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "7a55bf05-4bfa-4904-aa57-91e639f38e9b",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        }
      ],
      "clientScopes": [
        {
          "id": "8cdc0c1b-9349-4792-b8ec-f4d9bcf98d09",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "b0e96b4c-e790-43bb-bc4b-2bef7a9e1f6e",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "id": "12855eba-b670-4401-ad68-cc478c480fb9",
          "name": "participant",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "876ac006-7cde-4a7c-ab72-64e078c20b8b",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "ca02a41f-3128-41f5-9a53-b3b25b2adf7f",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            },
            {
              "id": "9a0da62f-6824-416e-8eb9-47afcc4fdda3",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "id": "bb79af2b-a17d-4f11-8a94-dfeca9974d3e",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "e8ec0746-2d7f-4bc4-bec2-acf9eeda7493",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            },
            {
              "id": "af13725e-1468-4e72-a365-7f7c16f42fc7",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "4d76c84e-b68f-40ea-be6a-93dd111222c9",
          "name": "schema",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "0aa713da-c832-47f4-bfa5-0395a9eed7e4",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "d653d614-21ea-43ec-bf52-7023064f02f6",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "0c83fef9-fc12-4c8d-912b-0c33705a5e51",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            },
            {
              "id": "8a765bf0-4b3c-4f3b-9dd9-7393c43302bb",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "id": "f5dcdd7b-7855-4c8c-9552-43657eb39d49",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "id": "c17817a3-570f-4aa5-8e77-5efb2aa3cc28",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "b8602ae1-9446-4c5a-a22b-06451e0e279e",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "id": "85f9fe13-2366-463f-a67c-28cc7fcb0fe3",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "6a73807f-99d2-4d80-a249-b5f29384bdc6",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "f7585dfa-94f5-4792-aedf-a9f33cd66d3a",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "a2839b81-af82-434d-9ccb-31bc7f716d4d",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3a0829e0-9a56-4af8-8561-995bfc4eaba2",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "id": "110f237a-c47a-4116-b040-114f66026672",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "e5520b36-30d4-4187-915e-4a4e9f40d5de",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "115b221c-e4ad-4039-89be-71a23f458fbe",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "8c87daa4-4c2a-4407-b907-42544eb7c23a",
          "name": "user",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "2808dde9-1f13-4062-a95b-d8aa8e5a1de0",
          "name": "query",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "04dc57f5-1b19-4b3a-871d-e07af3a21d09",
          "name": "self-description",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "0eb18a29-bc6f-49ae-b83f-baa724db43b0",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "8fa06769-45df-4a8f-9826-28404e62bdf7",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "0af67b82-dfba-4ac5-8a08-f854e697f631",
          "name": "role",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "b125d27b-4038-45d5-a40f-5c5c03507567",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "464f9c67-e95a-4136-ad93-22f5190e304d",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "752a4e76-b88b-4645-ac4e-1cc7133917a8",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "7872f01b-38e7-415a-874b-9004c71a3e88",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "853a6314-4305-4db4-94eb-22c994fe72e4",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "dc5d9dcd-0269-46e6-a289-615e8e9bd1e6",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "12de7cd4-1376-437d-9e6b-08d16c738f95",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "b4cdcbc2-f20b-42d6-923c-b438866d4403",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "8336ad4e-7183-4929-acec-ef1bfcbee46a",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        },
        {
          "id": "fff4bd04-c33f-412d-a617-8c35a7410b3a",
          "name": "gaia-x",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "394711df-e0db-441d-bafc-c0e74a382fae",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "c3f8ac23-1cc6-41bf-b6b2-83db6295c9cd",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "id": "26499cc6-995c-4cba-852a-9737c562d22b",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "id": "63a4a9d0-212d-46a8-a503-fa3bf6a6e0a1",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            },
            {
              "id": "e97ffdb9-7cec-44e1-b17b-e62eddd054ec",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "7aa0cc40-48f5-4443-90c2-aa2cec1f70b8",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "9049fd60-4577-447f-9ec0-72e32dc3502c",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "81abf857-0a30-4209-92d3-e1d5507e9b5c",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            },
            {
              "id": "40903466-5300-4a4f-a7d6-231bcb8573c0",
              "name": "user participant id",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "participantId",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "participant_id",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "705dd4f1-a790-4e89-bbba-d05a68d4c0c2",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "8b3964ef-c2ca-4240-9714-bb09495c3db5",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "acedb082-d9e4-4e30-abef-5c1b23adb220",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "8b20b92d-b43f-4cfb-9e55-cf73cab8797d",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "b69dbedf-4120-44fb-9e3f-90ed34c7201b",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            }
          ]
        },
        {
          "id": "0f0d05d6-d959-4123-9efa-8fd6493b0b47",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        }
      ],
      "defaultDefaultClientScopes": [
        "role_list",
        "roles",
        "web-origins"
      ],
      "defaultOptionalClientScopes": [
        "offline_access",
        "address",
        "phone",
        "microprofile-jwt",
        "email",
        "profile"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {},
      "loginTheme": "gaia-x",
      "eventsEnabled": false,
      "eventsListeners": [
        "jboss-logging"
      ],
      "enabledEventTypes": [],
      "adminEventsEnabled": false,
      "adminEventsDetailsEnabled": false,
      "identityProviders": [],
      "identityProviderMappers": [
        {
          "id": "21c25498-7016-4e09-8290-95fe306173b1",
          "name": "user name",
          "identityProviderAlias": "ssi-siop",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "preferred_username",
            "user.attribute": "username"
          }
        },
        {
          "id": "ea0792ed-9bcd-46a6-acf4-ed3506534740",
          "name": "last name",
          "identityProviderAlias": "ssi-siop",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "family_name",
            "user.attribute": "lastName"
          }
        },
        {
          "id": "e21bb8dd-e224-4125-96d8-b03a452b13f1",
          "name": "email",
          "identityProviderAlias": "ssi-siop",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "email",
            "user.attribute": "email"
          }
        },
        {
          "id": "ecf928ac-6d4f-4b37-b8cf-b29e9ffcbf1d",
          "name": "last name",
          "identityProviderAlias": "ssi-oidc",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "family_name",
            "user.attribute": "lastName"
          }
        },
        {
          "id": "a75142a3-1a57-4c8c-8a67-f85ad1df2b71",
          "name": "user name",
          "identityProviderAlias": "ssi-oidc",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "preferred_username",
            "user.attribute": "username"
          }
        },
        {
          "id": "a1004f26-bd5d-4ac0-8732-d3a16dbb81e2",
          "name": "email",
          "identityProviderAlias": "ssi-oidc",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "email",
            "user.attribute": "email"
          }
        },
        {
          "id": "3a041025-6cad-40b5-a9d0-73fb90074e1e",
          "name": "first name",
          "identityProviderAlias": "ssi-oidc",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "name",
            "user.attribute": "firstName"
          }
        },
        {
          "id": "f6738e08-32cc-410a-805b-53fc648cf513",
          "name": "first name",
          "identityProviderAlias": "ssi-siop",
          "identityProviderMapper": "oidc-user-attribute-idp-mapper",
          "config": {
            "syncMode": "INHERIT",
            "claim": "name",
            "user.attribute": "firstName"
          }
        }
      ],
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "b0d0db1f-6ae7-4856-8ce2-7b770d1bc61f",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "9329cb81-3e46-47d6-b350-5d8087e87cf5",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "ec1b1ee9-270a-498f-b9ef-feff690aba87",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "saml-role-list-mapper",
                "oidc-address-mapper",
                "saml-user-property-mapper",
                "oidc-usermodel-property-mapper",
                "saml-user-attribute-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "oidc-full-name-mapper",
                "oidc-usermodel-attribute-mapper"
              ]
            }
          },
          {
            "id": "f78e90a8-7c92-4ddc-8c6b-4f2363ab1b1e",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "b5d35367-a334-43b3-94d4-6633861c12df",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-sha256-pairwise-sub-mapper",
                "saml-role-list-mapper",
                "oidc-usermodel-attribute-mapper",
                "oidc-full-name-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-address-mapper",
                "saml-user-property-mapper",
                "saml-user-attribute-mapper"
              ]
            }
          },
          {
            "id": "b69bd178-95a4-488a-ab0b-df7e032b9666",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "2188e132-b7cc-41bc-b967-06b954761f2a",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "a8f92145-2d2e-43e4-9f12-963c0579cc8c",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          }
        ],
        "org.keycloak.userprofile.UserProfileProvider": [
          {
            "id": "eccc20ef-ccc4-4e54-b385-245cd6239bc3",
            "providerId": "declarative-user-profile",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "4dbacd4a-e98d-4479-86d5-e17bcff5e14f",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "445b8478-0710-49b0-9462-b07a5844bbe6",
            "name": "rsa-enc-generated",
            "providerId": "rsa-enc-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "RSA-OAEP"
              ]
            }
          },
          {
            "id": "8a29592d-3aaf-48d5-b520-5a9a7d5ae630",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "d9b0da75-ef91-4d12-ab9b-a5078b157865",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": false,
      "supportedLocales": [],
      "authenticationFlows": [
        {
          "id": "b5d08378-38f3-4496-9b2b-0ee7bf825ed5",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "6e4d260d-4a78-43a3-b014-b23733278d9b",
          "alias": "Authentication Options",
          "description": "Authentication options.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "basic-auth",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "basic-auth-otp",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "d1cb35c3-6794-4f75-b790-2631db9d6c84",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "55bd3bee-a76e-4699-86ef-4a3296c86f47",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "4e645c37-488c-49ab-b063-55e71057c05f",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "e8e041d0-8c14-4517-b6d9-467adfadca7c",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "c1c3a5d5-8c52-4c19-bd53-810623cf4433",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "8fd18ce5-5b0b-40c0-93e4-ac049d712869",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "628adb5b-3ff6-472b-afbd-79b5b460a7ab",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "0548d6c5-8a46-4e85-8dfe-97a022f044eb",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "forms",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "e4298bb4-9c26-4c6d-9d46-e0c8762c44ea",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-secret-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "client-x509",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "25441118-d72b-4f0a-9435-109ca95b4645",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 30,
              "autheticatorFlow": true,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "aa03773b-29e9-4c48-b500-3530a821ee5d",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "482899af-76d6-4fe8-95da-948914100de0",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "25103421-043b-493f-950e-b3556d333a50",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "35749851-32ca-4e18-ab8d-c5ddd247fb77",
          "alias": "http challenge",
          "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "no-cookie-redirect",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": true,
              "flowAlias": "Authentication Options",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "02c361a9-397d-4b48-a5f1-3ef5a549ef53",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": true,
              "flowAlias": "registration form",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "268e2a0d-f598-40a9-99bd-12b6be17072b",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-profile-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 40,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-password-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 50,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 60,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "1387a549-34a2-4a27-883a-0197454fd9e3",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-credential-email",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticator": "reset-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 30,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 40,
              "autheticatorFlow": true,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false
            }
          ]
        },
        {
          "id": "e1c79e7c-60ff-4385-af5f-0485a6f83d9c",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "autheticatorFlow": false,
              "userSetupAllowed": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "64aa4860-ae80-4cab-98a3-008ad1ba26fc",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "67932daf-37af-4322-af10-7915c3eb6b54",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "terms_and_conditions",
          "name": "Terms and Conditions",
          "providerId": "terms_and_conditions",
          "enabled": false,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "delete_account",
          "name": "Delete Account",
          "providerId": "delete_account",
          "enabled": false,
          "defaultAction": false,
          "priority": 60,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": true,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        }
      ],
      "browserFlow": "browser",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "attributes": {
        "cibaBackchannelTokenDeliveryMode": "poll",
        "cibaExpiresIn": "120",
        "cibaAuthRequestedUserHint": "login_hint",
        "oauth2DeviceCodeLifespan": "600",
        "clientOfflineSessionMaxLifespan": "0",
        "oauth2DevicePollingInterval": "5",
        "clientSessionIdleTimeout": "0",
        "userProfileEnabled": "false",
        "parRequestUriLifespan": "60",
        "clientSessionMaxLifespan": "0",
        "clientOfflineSessionIdleTimeout": "0",
        "cibaInterval": "5"
      },
      "keycloakVersion": "17.0.1",
      "userManagedAccessAllowed": false,
      "clientProfiles": {
        "profiles": []
      },
      "clientPolicies": {
        "policies": []
      }
    }
---
# Source: fc-service/charts/keycloak/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fc-keycloak-headless
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-15.0.5
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/component: keycloak
---
# Source: fc-service/charts/keycloak/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fc-keycloak
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-15.0.5
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: http
      nodePort: null
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/component: keycloak
---
# Source: fc-service/charts/neo4j/templates/neo4j-svc.yaml
# ClusterIP service for bolt / http connections
apiVersion: v1
kind: Service
metadata:
  name: "fc-neo4j"
  namespace: "fed-cat"
  labels:
    helm.neo4j.com/neo4j.name: "fc-neo4j-db"
    app: "fc-neo4j-db"
    helm.neo4j.com/instance: "fc-neo4j"
    helm.neo4j.com/service: "default"    
spec:
  publishNotReadyAddresses: false
  type: ClusterIP
  selector:
    app: "fc-neo4j-db"
    helm.neo4j.com/instance: "fc-neo4j"
  ports:
    - protocol: TCP
      port: 7687
      targetPort: 7687
      name: tcp-bolt
    - protocol: TCP
      port: 7474
      targetPort: 7474
      name: tcp-http
    - protocol: TCP
      port: 7473
      targetPort: 7473
      name: tcp-https
---
# Source: fc-service/charts/neo4j/templates/neo4j-svc.yaml
# ClusterIP service for admin connections to Neo4j inside Kubernetes.
apiVersion: v1
kind: Service
metadata:
  name: "fc-neo4j-admin"
  namespace: "fed-cat"
  labels:
    helm.neo4j.com/neo4j.name: "fc-neo4j-db"
    app: "fc-neo4j-db"
    helm.neo4j.com/instance: "fc-neo4j"
    helm.neo4j.com/service: "admin"    
spec:
  publishNotReadyAddresses: true
  type: "ClusterIP"
  selector:
    app: "fc-neo4j-db"
    helm.neo4j.com/instance: "fc-neo4j"
  ports:
    - protocol: TCP
      port: 6362
      targetPort: 6362
      name: tcp-backup
    - protocol: TCP
      port: 7687
      targetPort: 7687
      name: tcp-bolt
    - protocol: TCP
      port: 7474
      targetPort: 7474
      name: tcp-http
    - protocol: TCP
      port: 7473
      targetPort: 7473
      name: tcp-https
---
# Source: fc-service/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: fc-postgres-hl
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: fc-postgres
    helm.sh/chart: postgresql-12.4.3
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: fc-postgres
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/component: primary
---
# Source: fc-service/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: fc-postgres
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: fc-postgres
    helm.sh/chart: postgresql-12.4.3
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: fc-postgres
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/component: primary
---
# Source: fc-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: fc-service
  labels:
    helm.sh/chart: fc-service-0.1.0
    app.kubernetes.io/name: fc-service
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/version: "1.1.0-SNAPSHOT"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8081
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: fc-service
    app.kubernetes.io/instance: fc-demo
---
# Source: fc-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fc-service
  labels:
    helm.sh/chart: fc-service-0.1.0
    app.kubernetes.io/name: fc-service
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/version: "1.1.0-SNAPSHOT"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: fc-service
      app.kubernetes.io/instance: fc-demo
  template:
    metadata:
      labels:
        app.kubernetes.io/name: fc-service
        app.kubernetes.io/instance: fc-demo
    spec:
      serviceAccountName: default
      securityContext:
        allowPrivilegeEscalation: false
      containers:
        - name: fc-service
          securityContext:
            {}
          image: "registry.gitlab.com/gaia-x/data-infrastructure-federation-services/cat/fc-service/fc-service-server:1.1.0-SNAPSHOT"
          imagePullPolicy: Always
          env:
            - name: DATASTORE_FILE_PATH
              value: /var/lib/fc-service/filestore
            - name: GRAPHSTORE_URI
              value: bolt://fc-neo4j:7687
            - name: GRAPHSTORE_QUERY_TIMEOUT_IN_SECONDS
              value: "5"
            - name: GRAPHSTORE_PASSWORD
              value: ztfu57zKV2zcw8
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: http://fc-keycloak-headless.fed-cat.svc.cluster.local:8080
            - name: KEYCLOAK_CREDENTIALS_SECRET
              valueFrom:
                secretKeyRef:
                  key: keycloak_client_secret
                  name: fc-keycloak-client-secret
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://fc-postgres:5432/postgres
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
                  name: fc-postgres
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI
              value: http://key-server/realms/gaia-x
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
#          livenessProbe:
#            httpGet:
#              path: /actuator/health
#              port: http
          readinessProbe:
            httpGet:
              path: /actuator/health 
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
          resources:
            {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fc-service
              topologyKey: kubernetes.io/hostname
            weight: 100
      restartPolicy: Always
      hostAliases:
        - hostnames:
          - key-server
          ip: 10.97.211.241
---
# Source: fc-service/charts/keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: fc-keycloak
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-15.0.5
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
spec:
  replicas: 1
  podManagementPolicy: Parallel
  serviceName: fc-keycloak-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels: 
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: fc-demo
      app.kubernetes.io/component: keycloak
  template:
    metadata:
      annotations:
        checksum/configmap-env-vars: 15c5b1cf79d4099fb7de00e2ebfe7ccdcb9a1177faf0bc0e727a05a32f85430e
        checksum/secrets: 2623e0982a320cf84d40956176f27dd819e61b169756f6abd68bfaeb921819b2
      labels:
        app.kubernetes.io/name: keycloak
        helm.sh/chart: keycloak-15.0.5
        app.kubernetes.io/instance: fc-demo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: keycloak
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: fc-demo
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      enableServiceLinks: true
      initContainers:
      containers:
        - name: keycloak
          image: docker.io/bitnami/keycloak:20.0.2
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: KUBERNETES_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: BITNAMI_DEBUG
              value: "false"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fc-keycloak
                  key: admin-password
            - name: KEYCLOAK_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fc-postgres
                  key: password
            - name: KEYCLOAK_HTTP_RELATIVE_PATH
              value: "/"
            - name: KEYCLOAK_EXTRA_ARGS
              value: -Dkeycloak.import=/config/gaia-x-realm.json
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: KEYCLOAK_FRONTEND_URL
              value: http://key-server/
            - name: KEYCLOAK_ADMIN_URL
              value: http://key-server/admin/
          envFrom:
            - configMapRef:
                name: fc-keycloak-env-vars
          resources:
            limits: {}
            requests: {}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: infinispan
              containerPort: 7800
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 1
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            httpGet:
              path: /realms/master
              port: http
          volumeMounts:
            - mountPath: /config
              name: config
              readOnly: true
      volumes:
        - configMap:
            items:
            - key: gaia-x-realm.json
              path: gaia-x-realm.json
            name: fc-keycloak-realm-configmap
          name: config
---
# Source: fc-service/charts/neo4j/templates/neo4j-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    helm.neo4j.com/neo4j.name: "fc-neo4j-db"
    helm.neo4j.com/clustering: "false"
    app: "fc-neo4j-db"
    helm.neo4j.com/instance: fc-neo4j    
  name: fc-neo4j
  namespace: "fed-cat"
spec:
  serviceName: "fc-neo4j"
  podManagementPolicy: "Parallel" # This setting means that the StatefulSet controller doesn't block applying changes until the existing Pod is READY.
  replicas: 1
  selector:
    matchLabels:
      app: "fc-neo4j-db"
      helm.neo4j.com/instance: "fc-neo4j"
  template:
    metadata:
      labels:
        app: "fc-neo4j-db"
        helm.neo4j.com/neo4j.name: "fc-neo4j-db"
        helm.neo4j.com/clustering: "false"
        helm.neo4j.com/pod_category: "neo4j-instance" # used for anti affinity rules
        helm.neo4j.com/neo4j.loadbalancer: "include"
        helm.neo4j.com/instance: "fc-neo4j"        
      annotations:
        "checksum/fc-neo4j-config": db08908339ae31ede8d075c8a80b535b662b54cfa9ac81a690676dce4b8bfa43        
    spec:      
      affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchLabels:
                    app: "fc-neo4j-db"
                    helm.neo4j.com/pod_category: "neo4j-instance"
                topologyKey: kubernetes.io/hostname
      securityContext: 
        fsGroup: 7474
        fsGroupChangePolicy: Always
        runAsGroup: 7474
        runAsNonRoot: true
        runAsUser: 7474
      
      
      terminationGracePeriodSeconds: 3600            
      containers:
        - name: "neo4j"
          image: "neo4j:5.5.0"
          imagePullPolicy: "IfNotPresent"
          envFrom:
            - configMapRef:
                name: "fc-neo4j-env"
            - secretRef:
                name: "fc-neo4j-db-auth"
          env:
            - name: HELM_NEO4J_VERSION
              value: "5.5.0"
            - name: HELM_CHART_VERSION
              value: "5.5.0"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SERVICE_NEO4J_ADMIN
              value: "fc-neo4j-admin.fed-cat.svc.cluster.local"
            - name: SERVICE_NEO4J_INTERNALS
              value: "fc-neo4j-internals.fed-cat.svc.cluster.local"
            - name: SERVICE_NEO4J
              value: "fc-neo4j.fed-cat.svc.cluster.local"
          ports:
            - containerPort: 7474
              name: http
            - containerPort: 7687
              name: bolt
            - containerPort: 7473
              name: https
            - containerPort: 6362
              name: backup
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
          securityContext: 
              runAsGroup: 7474
              runAsNonRoot: true
              runAsUser: 7474
          volumeMounts:
            - mountPath: "/config/neo4j.conf"
              name: neo4j-conf
            - mountPath: "/config/server-logs.xml"
              name: neo4j-server-logs
            - mountPath: "/config/user-logs.xml"
              name: neo4j-user-logs
            - mountPath: /var/lib/neo4j/plugins
              name: fc-neo4j-data                        
            - mountPath: "/backups"
              name: "data"
              subPathExpr: "backups"
            - mountPath: "/data"
              name: "data"
              subPathExpr: "data"
            - mountPath: "/import"
              name: "data"
              subPathExpr: "import"
            - mountPath: "/licenses"
              name: "data"
              subPathExpr: "licenses"
            - mountPath: "/logs"
              name: "data"
              subPathExpr: "logs/$(POD_NAME)"
            - mountPath: "/metrics"
              name: "data"
              subPathExpr: "metrics/$(POD_NAME)"            
          readinessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: 20
            timeoutSeconds: 10
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 7687
            failureThreshold: 40
            timeoutSeconds: 10
            periodSeconds: 5
          startupProbe:
            tcpSocket:
              port: 7687
            failureThreshold: 1000
            periodSeconds: 5
      volumes:
        - name: neo4j-conf
          projected:
            defaultMode: 0440
            sources:
              - configMap:
                  name: "fc-neo4j-default-config"
              - configMap:
                  name: "fc-neo4j-user-config"
              - configMap:
                  name: "fc-neo4j-k8s-config"
        - name: neo4j-server-logs
          configMap:
            name: "fc-neo4j-server-logs-config"
        - name: neo4j-user-logs
          configMap:
            name: "fc-neo4j-user-logs-config"
        - emptyDir: {}
          name: fc-neo4j-data
        
  volumeClaimTemplates: 
    - metadata:
        name: "data"
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 10Gi
---
# Source: fc-service/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: fc-postgres
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: fc-postgres
    helm.sh/chart: postgresql-12.4.3
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: fc-postgres-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: fc-postgres
      app.kubernetes.io/instance: fc-demo
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: fc-postgres
      labels:
        app.kubernetes.io/name: fc-postgres
        helm.sh/chart: postgresql-12.4.3
        app.kubernetes.io/instance: fc-demo
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: fc-postgres
                    app.kubernetes.io/instance: fc-demo
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:15.2.0-debian-11-r30
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "keycloak"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fc-postgres
                  key: postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fc-postgres
                  key: password
            - name: POSTGRES_DB
              value: "keycloak"
            # Replication
            # Initdb
            - name: POSTGRESQL_INITSCRIPTS_USERNAME
              value: postgres
            - name: POSTGRESQL_INITSCRIPTS_PASSWORD
              value: "postgres"
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak" -d "dbname=keycloak" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "keycloak" -d "dbname=keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: custom-init-scripts
          configMap:
            name: fc-postgres-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: fc-service/charts/keycloak/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fc-keycloak
  namespace: "fed-cat"
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-15.0.5
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: keycloak
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
spec:
  ingressClassName: "nginx"
  rules:
    - host: "key-server"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fc-keycloak
                port:
                  number: 8080
---
# Source: fc-service/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fc-service
  labels:
    helm.sh/chart: fc-service-0.1.0
    app.kubernetes.io/name: fc-service
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/version: "1.1.0-SNAPSHOT"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.allow-http: "true"
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/proxy-buffer-size: 128k
    nginx.ingress.kubernetes.io/session-cookie-expires: "172800"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "172800"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: "fc-server"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fc-service
                port:
                  number: 8081
---
# Source: fc-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "fc-service-test-connection"
  labels:
    helm.sh/chart: fc-service-0.1.0
    app.kubernetes.io/name: fc-service
    app.kubernetes.io/instance: fc-demo
    app.kubernetes.io/version: "1.1.0-SNAPSHOT"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['fc-service:8081']
  restartPolicy: Never
